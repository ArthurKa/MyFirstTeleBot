import telebot
import constants as const
import functions as func


bot = telebot.TeleBot(const.botToken)
me = bot.get_me()
func.log("–ë–æ—Ç", func.str_or_empty_if_None(me.first_name), func.str_or_empty_if_None(me.last_name), "–∑–∞–ø—É—â–µ–Ω.--------------------------------")
mode = dict()
ban_limit = dict()
ban_limit_number = 4
get_to_banlist = True


@bot.message_handler(commands=['start'])
def command_start(message):
    if message.text == "/start" or message.text == "/start@" + me.username:
        global mode, ban_limit
        mode[message.from_user.id] = 0
        ban_limit[message.from_user.id] = 0
        banreason = func.is_banned(message.from_user.id)
        if banreason is None:
            func.log(func.user_from_message(message), ":", message.text)
            users = func.get_user_info(message)
            bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é. –Ø {} üòä\n"
                                              "–í—ã –º–æ–π {}-–π –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ {}.\n\n"
                                              "–í–æ—Ç –º–æ–π –º–∞–ª–µ–Ω—å–∫–∏–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n"
                                              "".format(me.first_name, str(users[0]), str(users[1])) +
                             const.help_command + "\n" + const.commands + "\n\n–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.")
        else:
            func.log(func.user_from_message(message), "(–≤ –±–∞–Ω–µ) :", message.text)
            bot.send_message(message.chat.id, func.banmessage(banreason, message))
    else:
        content_type_text(message)


@bot.message_handler(commands=['help'])
def command_help(message):
    if message.text == "/help" or message.text == "/help@" + me.username:
        global mode, ban_limit
        mode[message.from_user.id] = 0
        ban_limit[message.from_user.id] = 0
        banreason = func.is_banned(message.from_user.id)
        if banreason is None:
            func.log(func.user_from_message(message), ":", message.text)
            func.check_user_id(message)
            bot.send_message(message.chat.id, "–í–æ—Ç –º–æ–π –º–∞–ª–µ–Ω—å–∫–∏–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n"
                                              "" + const.commands)
        else:
            func.log(func.user_from_message(message), "(–≤ –±–∞–Ω–µ) :", message.text)
            bot.send_message(message.chat.id, func.banmessage(banreason, message))
    else:
        content_type_text(message)


@bot.message_handler(commands=['getstickers'])
def command_getstickers(message):
    if message.text == "/getstickers" or message.text == "/getstickers@" + me.username:
        global mode, ban_limit
        mode[message.from_user.id] = 0
        ban_limit[message.from_user.id] = 0
        banreason = func.is_banned(message.from_user.id)
        if banreason is None:
            func.log(func.user_from_message(message), ":", message.text)
            func.check_user_id(message)
            bot.send_message(message.chat.id,
                             "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Ç –Ω–∞—à —Ñ–∏—Ä–º–µ–Ω–Ω—ã–π –Ω–∞–±–æ—Ä —Å—Ç–∏–∫–µ—Ä–æ–≤: t.me/addstickers/podsl315.")
        else:
            func.log(func.user_from_message(message), "(–≤ –±–∞–Ω–µ) :", message.text)
            bot.send_message(message.chat.id, func.banmessage(banreason, message))
    else:
        content_type_text(message)


@bot.message_handler(commands=['bugreport'])
def command_bugreport(message):
    if message.text == "/bugreport" or message.text == "/bugreport@" + me.username:
        global mode, ban_limit
        mode[message.from_user.id] = 0
        ban_limit[message.from_user.id] = 0
        banreason = func.is_banned(message.from_user.id)
        if banreason is None:
            func.log(func.user_from_message(message), ":", message.text)
            func.check_user_id(message)
            additional_message = ''
            if message.text == "/bugreport@" + me.username:
                additional_message = "–ü–∏—à–∏—Ç–µ –º–Ω–µ –ª–∏—á–Ω–æ (@" + me.username + "), —Ç–∞–∫ –∫–∞–∫ —É –º–µ–Ω—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–æ–æ–±—â–µ–Ω–∏—è–º –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ.\n"
            bot.send_message(message.chat.id, "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–æ–±—â–∏—Ç—å?\n" + additional_message +
                                              "–ö–æ–º–∞–Ω–¥–∞ ¬´/cancel¬ª –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
            if message.text == "/bugreport@" + me.username:
                try:
                    bot.send_message(message.from_user.id, "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–æ–±—â–∏—Ç—å?\n"
                                                           "–ö–æ–º–∞–Ω–¥–∞ ¬´/cancel¬ª –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
                except:
                    pass
            mode[message.from_user.id] = 11
        else:
            func.log(func.user_from_message(message), "(–≤ –±–∞–Ω–µ) :", message.text)
            bot.send_message(message.chat.id, func.banmessage(banreason, message))
    else:
        content_type_text(message)


@bot.message_handler(commands=['feedback'])
def command_feedback(message):
    if message.text == "/feedback" or message.text == "/feedback@" + me.username:
        global mode, ban_limit
        mode[message.from_user.id] = 0
        ban_limit[message.from_user.id] = 0
        banreason = func.is_banned(message.from_user.id)
        if banreason is None:
            func.log(func.user_from_message(message), ":", message.text)
            func.check_user_id(message)
            bot.send_message(message.chat.id, "–û—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–π –æ—Ç–∑—ã–≤ –í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ telegram.me/storebot?start="
                                              "" + me.username + ".\n"
                                              "–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ ¬´–ù–∞—á–∞—Ç—å¬ª –∏ —Å–ª–µ–¥—É–π—Ç–µ –ø–æ–¥—Å–∫–∞–∑–∫–∞–º –±–æ—Ç–∞.\n"
                                              "__________\n"
                                              "*–æ—Ç–ø—Ä–∞–≤–∏–≤ –µ—â—ë –æ–¥–∏–Ω –æ—Ç–∑—ã–≤, –í—ã –∑–∞–º–µ–Ω–∏—Ç–µ —Ç–æ—Ç, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ä–∞–Ω–µ–µ")
        else:
            func.log(func.user_from_message(message), "(–≤ –±–∞–Ω–µ) :", message.text)
            bot.send_message(message.chat.id, func.banmessage(banreason, message))
    else:
        content_type_text(message)


@bot.message_handler(commands=['cancel'])
def command_cancel(message):
    if message.text == "/cancel" or message.text == "/cancel@" + me.username:
        global mode, ban_limit
        ban_limit[message.from_user.id] = 0
        banreason = func.is_banned(message.from_user.id)
        if banreason is None or mode[message.from_user.id] == 21:
            if mode[message.from_user.id] == 21:
                func.log(func.user_from_message(message), "(–≤ –±–∞–Ω–µ) :", message.text)
            else:
                func.log(func.user_from_message(message), ":", message.text)
            func.check_user_id(message)
            if message.from_user.id not in mode:
                mode[message.from_user.id] = 0
            if mode[message.from_user.id] == 0:
                bot.send_message(message.chat.id, "–û—Ç–º–µ–Ω—è—Ç—å-—Ç–æ –Ω–µ—á–µ–≥–æ...")
            else:
                mode[message.from_user.id] = 0
                bot.send_message(message.chat.id, "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n"
                                                  "–ö–æ–º–∞–Ω–¥–∞ ¬´/help¬ª –¥–ª—è –ø–æ–º–æ—â–∏.")
        else:
            func.log(func.user_from_message(message), "(–≤ –±–∞–Ω–µ) :", message.text)
            bot.send_message(message.chat.id, func.banmessage(banreason, message))
    else:
        content_type_text(message)


@bot.message_handler(commands=['timestats'])
def command_timestats(message):
    if message.text == "/timestats" or message.text == "/timestats@" + me.username:
        global mode, ban_limit
        mode[message.from_user.id] = 0
        ban_limit[message.from_user.id] = 0
        banreason = func.is_banned(message.from_user.id)
        if banreason is None:
            func.log(func.user_from_message(message), ":", message.text)
            func.check_user_id(message)
            bot.send_message(message.chat.id, func.get_bot_statistics())
        else:
            func.log(func.user_from_message(message), "(–≤ –±–∞–Ω–µ) :", message.text)
            bot.send_message(message.chat.id, func.banmessage(banreason, message))
    else:
        content_type_text(message)


@bot.message_handler(commands=['banappeal'])
def command_banappeal(message):
    if message.text == "/banappeal" or message.text == "/banappeal@" + me.username:
        banreason = func.is_banned(message.from_user.id)
        global mode, ban_limit
        mode[message.from_user.id] = 0
        ban_limit[message.from_user.id] = 0
        if banreason is None:
            func.log(func.user_from_message(message), ":", message.text)
            func.check_user_id(message)
            bot.send_message(message.chat.id, "–ü–æ–¥–∞–≤–∞—Ç—å –∞–ø–µ–ª–ª—è—Ü–∏—é –Ω–µ –Ω–∞ —á—Ç–æ. –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞ –¥–ª—è –í–∞—Å –æ—Ç–∫—Ä—ã—Ç.")
        else:
            func.log(func.user_from_message(message), "(–≤ –±–∞–Ω–µ) :", message.text)
            if func.ban_appeal_sended(message.from_user.id):
                bot.send_message(message.chat.id, "–í—ã —É–∂–µ –ø–æ–¥–∞–ª–∏ –Ω–∞ –∞–ø–µ–ª–ª—è—Ü–∏—é —Ä–∞–Ω–µ–µ.")
            else:
                mode[message.from_user.id] = 21
                bot.send_message(message.chat.id, "–í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π... –ü–∞—Ä—É —Å–ª–æ–≤, –µ—Å–ª–∏ –∂–µ–ª–∞–µ—Ç–µ.\n"
                                                  "¬´/skip¬ª –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞\n"
                                                  "¬´/cancel¬ª –¥–ª—è –æ—Ç–º–µ–Ω—ã")
    else:
        content_type_text(message)


@bot.message_handler(commands=['getlocationaccess'])
def command_getlocationaccess(message):
    if message.text == "/getlocationaccess" or message.text == "/getlocationaccess@" + me.username:
        global mode, ban_limit
        mode[message.from_user.id] = 0
        ban_limit[message.from_user.id] = 0
        banreason = func.is_banned(message.from_user.id)
        if banreason is None:
            func.log(func.user_from_message(message), ":", message.text)
            func.check_user_id(message)

            if func.is_allowed_to_location(message.from_user.id):
                bot.send_message(message.chat.id, "–£ –í–∞—Å –∏ —Ç–∞–∫ —É–∂–µ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–æ–º–∞–Ω–¥–µ /location.")
            else:
                if func.asked_location_access_before(message.from_user.id):
                    bot.send_message(message.chat.id, "–í—ã —É–∂–µ –∑–∞–ø—Ä–æ—Å–∏–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Ä–∞–Ω–µ–µ.")
                else:
                    mode[message.from_user.id] = 31
                    bot.send_message(message.chat.id, "–í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π... –ü–∞—Ä—É —Å–ª–æ–≤, –µ—Å–ª–∏ –∂–µ–ª–∞–µ—Ç–µ.\n"
                                                      "¬´/skip¬ª –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞\n"
                                                      "¬´/cancel¬ª –¥–ª—è –æ—Ç–º–µ–Ω—ã")
        else:
            func.log(func.user_from_message(message), "(–≤ –±–∞–Ω–µ) :", message.text)
            bot.send_message(message.chat.id, func.banmessage(banreason, message))
    else:
        content_type_text(message)


@bot.message_handler(commands=['location'])
def command_location(message):
    if message.text == "/location" or message.text == "/location@" + me.username:
        global mode, ban_limit
        mode[message.from_user.id] = 0
        ban_limit[message.from_user.id] = 0
        banreason = func.is_banned(message.from_user.id)
        if banreason is None:
            func.log(func.user_from_message(message), ":", message.text)
            func.check_user_id(message)
            if func.is_allowed_to_location(message.from_user.id):
                location = func.get_location()
                bot.send_message(message.chat.id, "–í–æ—Ç —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞.")
                bot.send_location(message.chat.id, location[0], location[1])
            else:
                bot.send_message(message.chat.id, "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.\n"
                                                  "/getlocationaccess - –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –¥–æ—Å—Ç—É–ø.")
        else:
            func.log(func.user_from_message(message), "(–≤ –±–∞–Ω–µ) :", message.text)
            bot.send_message(message.chat.id, func.banmessage(banreason, message))
    else:
        content_type_text(message)


@bot.message_handler(content_types=['location'])
def content_type_location(message):
    global mode, ban_limit
    mode[message.from_user.id] = 0
    ban_limit[message.from_user.id] = 0
    banreason = func.is_banned(message.from_user.id)
    if banreason is None:
        func.log(func.user_from_message(message), ": –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è.")
        func.check_user_id(message)
        if message.from_user.id == const.ids['–Ø']:
            func.write_my_location(message.location.latitude, message.location.longitude)
            bot.send_message(message.chat.id, "–î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã.")
        else:
            bot.send_message(message.chat.id, "–ü–æ–ª—É—á–∏–ª –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, –Ω–æ —á—Ç–æ –¥–µ–ª–∞—Ç—å —Å –Ω–µ–π –¥–∞–ª—å—à–µ —è –Ω–µ –∑–Ω–∞—é...")
    else:
        func.log(func.user_from_message(message), "(–≤ –±–∞–Ω–µ) : –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è.")
        bot.send_message(message.chat.id, func.banmessage(banreason, message))


@bot.message_handler(content_types=['audio'])
def content_type_audio(message):
    global mode, ban_limit
    mode[message.from_user.id] = 0
    ban_limit[message.from_user.id] = 0
    banreason = func.is_banned(message.from_user.id)
    if banreason is None:
        func.log(func.user_from_message(message), ": –ú—É–∑—ã–∫–∞ " + str(message.audio.performer) + " - " +
                 str(message.audio.title))
        func.check_user_id(message)
        bot.send_message(message.chat.id, "–•–æ—Ä–æ—à–∞—è –ø–µ—Å–µ–Ω–∫–∞.")
    else:
        func.log(func.user_from_message(message), "(–≤ –±–∞–Ω–µ) : –ú—É–∑—ã–∫–∞ " + str(message.audio.performer) + " - " +
                 str(message.audio.title))
        bot.send_message(message.chat.id, func.banmessage(banreason, message))


@bot.message_handler(content_types=['sticker'])
def content_type_sticker(message):
    global mode, ban_limit
    mode[message.from_user.id] = 0
    ban_limit[message.from_user.id] = 0
    banreason = func.is_banned(message.from_user.id)
    if banreason is None:
        func.log(func.user_from_message(message), ": –°—Ç–∏–∫–µ—Ä.")
        func.check_user_id(message)
        bot.send_message(message.chat.id, "–Ø –≤–∏–∂—É —Ç—É—Ç —Å—Ç–∏–∫–µ—Ä.")
    else:
        func.log(func.user_from_message(message), "(–≤ –±–∞–Ω–µ) : –°—Ç–∏–∫–µ—Ä.")
        bot.send_message(message.chat.id, func.banmessage(banreason, message))


@bot.message_handler(content_types=['text'])
def content_type_text(message):
    global mode, ban_limit
    if message.from_user.id not in mode:
        mode[message.from_user.id] = 0
    if message.from_user.id not in ban_limit:
        ban_limit[message.from_user.id] = 0
    banreason = func.is_banned(message.from_user.id)
    if banreason is None or mode[message.from_user.id] == 21:
        func.check_user_id(message)
        if mode[message.from_user.id] == 0:
            func.log(func.user_from_message(message), ": –ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã–π –Ω–∞–±–æ—Ä —Å–∏–º–≤–æ–ª–æ–≤: " + message.text)
            bot.send_message(message.chat.id, "–ü—Ä–æ—Å—Ç–∏—Ç–µ, –Ω–æ —è –Ω–µ –ø–æ–Ω–∏–º–∞—é –í–∞—Å...")
            if get_to_banlist:
                ban_limit[message.from_user.id] += 1
            if ban_limit[message.from_user.id] == ban_limit_number:
                func.add_to_anlist(message.from_user.id, "–§–ª—É–¥.")
                bot.send_message(message.chat.id, func.banmessage("–§–ª—É–¥."))
                ban_limit[message.from_user.id] = 0
            elif ban_limit[message.from_user.id] > 1:
                bot.send_message(message.chat.id, "–í–Ω–∏–º–∞–Ω–∏–µ! –í—ã –ø–æ–¥–æ–∑—Ä–µ–≤–∞–µ—Ç–µ—Å—å –≤–æ —Ñ–ª—É–¥–µ.\n"
                                                  "–û—Å—Ç–∞–ª–æ—Å—å —Å–æ–æ–±—â–µ–Ω–∏–π: " +
                                 str(ban_limit_number-ban_limit[message.from_user.id]) + ".")
        # /bugreport
        elif mode[message.from_user.id] == 11:
            mode[message.from_user.id] = 0
            ban_limit[message.from_user.id] = 0
            func.log(func.user_from_message(message), ":", message.text)
            bot.send_message(const.ids['–Ø'], func.get_time(True, message) + " - " + func.user_from_message(message) +
                             " : –û—Ç–∑—ã–≤.\n" + message.text)
            bot.send_message(message.chat.id, "–û—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞: ¬´"
                                              "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–æ—è–≤–ª–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å –∫ –º–æ–µ–º—É –±–æ—Ç—É. –Ø –í–∞–º –æ—Ç–≤–µ—á—É –≤ –±–ª–∏–∂–∞–π—à–µ–µ "
                                              "–≤—Ä–µ–º—è, –µ—Å–ª–∏ —ç—Ç–æ –Ω—É–∂–Ω–æ.¬ª")
        # /banappeal
        elif mode[message.from_user.id] == 21:
            mode[message.from_user.id] = 0
            ban_limit[message.from_user.id] = 0
            func.log(func.user_from_message(message), "(–≤ –±–∞–Ω–µ) :", message.text)
            func.send_ban_appeal(message.from_user.id)
            msg = "–ó–∞–ø—Ä–æ—Å –Ω–∞ –±–∞–Ω-–∞–ø–µ–ª–ª—è—Ü–∏—é –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n" \
                  "" + func.user_from_message(message) + "."
            if not (message.text == "/skip" or message.text == "/skip@" + me.username):
                msg += "\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: " + message.text + "."
            bot.send_message(const.ids['–Ø'], msg)
            bot.send_message(message.chat.id, "–ó–∞–ø—Ä–æ—Å –Ω–∞ –∞–ø–µ–ª–ª—è—Ü–∏—é –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω.")
        # /getlocationaccess
        elif mode[message.from_user.id] == 31:
            mode[message.from_user.id] = 0
            ban_limit[message.from_user.id] = 0
            func.log(func.user_from_message(message), ":", message.text)
            func.ask_location_access(message.from_user.id)
            msg = "–ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ –ª–æ–∫–∞—Ü–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n" \
                  "" + func.user_from_message(message) + "."
            if not (message.text == "/skip" or message.text == "/skip@" + me.username):
                msg += "\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: " + message.text + "."
            bot.send_message(const.ids['–Ø'], msg)
            bot.send_message(message.chat.id, "–ó–∞–ø—Ä–æ—Å –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –≤ –±–ª–∏–∂–∞–π—à–µ–º –≤—Ä–µ–º–µ–Ω–∏.")

    else:
        func.log(func.user_from_message(message), "(–≤ –±–∞–Ω–µ) :", message.text)
        bot.send_message(message.chat.id, func.banmessage(banreason, message))


@bot.message_handler(content_types=['photo'])
def content_type_photo(message):
    global mode, ban_limit
    mode[message.from_user.id] = 0
    ban_limit[message.from_user.id] = 0
    banreason = func.is_banned(message.from_user.id)
    if banreason is None:
        func.log(func.user_from_message(message), ": –ö–∞—Ä—Ç–∏–Ω–∫–∞.")
        func.check_user_id(message)
        bot.send_message(message.chat.id, "–•–º... –≠—Ç–æ –∫–∞—Ä—Ç–∏–Ω–∫–∞!")
    else:
        func.log(func.user_from_message(message), "(–≤ –±–∞–Ω–µ) : –ö–∞—Ä—Ç–∏–Ω–∫–∞.")
        bot.send_message(message.chat.id, func.banmessage(banreason, message))


@bot.message_handler(content_types=['document'])
def content_type_document(message):
    global mode, ban_limit
    mode[message.from_user.id] = 0
    ban_limit[message.from_user.id] = 0
    banreason = func.is_banned(message.from_user.id)
    if banreason is None:
        func.log(func.user_from_message(message), ": –î–æ–∫—É–º–µ–Ω—Ç.")
        func.check_user_id(message)
        bot.send_message(message.chat.id, "–£—Ö, —ç—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç!")
    else:
        func.log(func.user_from_message(message), "(–≤ –±–∞–Ω–µ) : –î–æ–∫—É–º–µ–Ω—Ç.")
        bot.send_message(message.chat.id, func.banmessage(banreason, message))


@bot.message_handler(content_types=['video'])
def content_type_video(message):
    global mode, ban_limit
    mode[message.from_user.id] = 0
    ban_limit[message.from_user.id] = 0
    banreason = func.is_banned(message.from_user.id)
    if banreason is None:
        func.log(func.user_from_message(message), ": –í–∏–¥–µ–æ.")
        func.check_user_id(message)
        bot.send_message(message.chat.id, "–û–ø, –≤–∏–¥–æ—Å–∏–∫.")
    else:
        func.log(func.user_from_message(message), "(–≤ –±–∞–Ω–µ) : –í–∏–¥–µ–æ.")
        bot.send_message(message.chat.id, func.banmessage(banreason, message))


@bot.message_handler(content_types=['voice'])
def content_type_voice(message):
    global mode, ban_limit
    mode[message.from_user.id] = 0
    ban_limit[message.from_user.id] = 0
    banreason = func.is_banned(message.from_user.id)
    if banreason is None:
        func.log(func.user_from_message(message), ": –ì–æ–ª–æ—Å.")
        func.check_user_id(message)
        bot.send_message(message.chat.id, "–≠—Ç–æ –≥–æ–ª–æ—Å. –û–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ –æ–Ω.")
    else:
        func.log(func.user_from_message(message), "(–≤ –±–∞–Ω–µ) : –ì–æ–ª–æ—Å.")
        bot.send_message(message.chat.id, func.banmessage(banreason, message))


@bot.message_handler(content_types=['contact'])
def content_type_contact(message):
    global mode, ban_limit
    mode[message.from_user.id] = 0
    ban_limit[message.from_user.id] = 0
    banreason = func.is_banned(message.from_user.id)
    if banreason is None:
        func.log(func.user_from_message(message), ": –ö–æ–Ω—Ç–∞–∫—Ç.")
        func.check_user_id(message)
        bot.send_message(message.chat.id, "–ö–æ–Ω—Ç–∞–∫—Ç? –Ø –ø–æ–∑–≤–æ–Ω—é –ø–æ–∑–∂–µ.")

    else:
        func.log(func.user_from_message(message), "(–≤ –±–∞–Ω–µ) : –ö–æ–Ω—Ç–∞–∫—Ç.")
        bot.send_message(message.chat.id, func.banmessage(banreason, message))


bot.polling(none_stop=True)

"""
mode:
0 - –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º
11 - /bugreport
21 - /banappeal
31 - /getlocationaccess
"""